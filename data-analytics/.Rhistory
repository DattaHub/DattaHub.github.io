letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "nyakami"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "nyaka"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "ujbuk"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "chhagol"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "jontu"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "jantab"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "dhurbaal"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "dhorbaal"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "apadartha"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "murkho"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "mukkhu"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "seyana"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "fakenews"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "ninnicha"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "guru"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "goru"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "gadha"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "gadhardol"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "bokagadha"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "gadhata"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "gadha"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "tata"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "modi"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "boka"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "bokachoda"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "devil"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "khuni"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "killer"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "stupid"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "silly"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "joke"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "joke"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
string <- "modi"  # Replace "example" with the string you want to calculate the sum of alphabet positions for
string <- tolower(string)  # Convert the string to lowercase to simplify the calculation
sum <- 0  # Initialize a variable to store the sum of alphabet positions
for (i in 1:nchar(string)) {  # Loop through each character in the string
letter <- substring(string, i, i)  # Extract the current character from the string
(position <- match(letter, letters))  # Determine the alphabet position of the current character
cat(position,"+")
if (!is.na(position)) {  # If the current character is a letter, add its position to the sum
sum <- sum + position
}
}
print(sum)  # Print the sum of alphabet positions
sessionInfo()
?rchisq
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
chisq.sim.1 <- replicate(100, crossprod(rnorm(10)))
hist(chisq.sim.1)
hist(chisq.sim.1)
k = 10
chisq.sim.1 <- replicate(1000, crossprod(rnorm(10)))
hist(chisq.sim.1)
?crossprod
chisq.sim.2 <- rchisq(1000, df = 10)
hist(chisq.sim.2, col = rgb(1,0,0,0.5), add = T)
hist(chisq.sim.1)
chisq.sim.2 <- rchisq(1000, df = 10)
hist(chisq.sim.2, col = rgb(1,0,0,0.5), add = T)
hist(chisq.sim.1, add = T)
chisq.sim.2 <- rchisq(1000, df = 10)
hist(chisq.sim.2, col = rgb(1,0,0,0.5), add = T)
hist(chisq.sim.1, add = T)
?hist
k = 10
chisq.sim.1 <- replicate(1000, crossprod(rnorm(10)))
p1 <- hist(chisq.sim.1, plot = F)
chisq.sim.2 <- rchisq(1000, df = 10)
p2 <- hist(chisq.sim.2, plot = F)
plot(p1); plot(p2, , col = rgb(1,0,0,0.5), add = T)
k = 10
chisq.sim.1 <- replicate(1000, crossprod(rnorm(10)))
p1 <- hist(chisq.sim.1, plot = F)
chisq.sim.2 <- rchisq(1000, df = 10)
p2 <- hist(chisq.sim.2, plot = F)
plot(p1,col = rgb(0,0,1,0.5)); plot(p2, , col = rgb(1,0,0,0.5), add = T)
chisq.sim <- rchisq(1000, df = 5)
hist(chisq.sim.2), freq = F)
chisq.sim <- rchisq(1000, df = 5)
hist(chisq.sim.2, freq = F)
chisq.sim <- rchisq(1000, df = 5)
hist(chisq.sim, freq = F)
curve(dchisq(df=10), add = T)
chisq.sim <- rchisq(1000, df = 5)
hist(chisq.sim, freq = F)
curve(dchisq(x,df=10), add = T)
chisq.sim <- rchisq(1000, df = 5)
hist(chisq.sim, freq = F)
curve(dchisq(x,df=5), add = T)
chisq.sim = NULL
for(i in 1:1000){
}
chisq.sim = NULL
for(i in 1:1000){
chisq.sim <- c(chisq.sim, crossprod(rnorm(5))
}
chisq.sim <- c(chisq.sim, crossprod(rnorm(5))
}
for(i in 1:1000){
}
crossprod(rnorm(5)
)
chisq.sim = NULL
for(i in 1:1000){
chisq.sim = c(chisq.sim, crossprod(rnorm(5)))
}
plot(hist(chisq.sim, freq = F))
curve(dchisq(x, df = 5))
plot(hist(chisq.sim, freq = F))
curve(dchisq(x, df = 5), add = T)
plot(hist(chisq.sim, freq = T))
curve(dchisq(x, df = 5), add = T)
p <- hist(chisq.sim, freq = F)
plot(p)
curve(dchisq(x, df = 5), add = T)
p <- hist(chisq.sim, freq = T)
plot(p)
curve(dchisq(x, df = 5), add = T)
chisq.sim = NULL
for(i in 1:1000){
x <- rnorm(5)
chisq.sim = c(chisq.sim, sum(x*x))
}
p <- hist(chisq.sim, freq = T)
p <- hist(chisq.sim, freq = F)
plot(p)
hist(chisq.sim, freq = F)
curve(dchisq(x, df = 5), add = T)
## one sample versus mu=0
y <- rnorm(20, mean = 3, sd = 2)
ybar <- mean(y)
s2 <- var(y)
n <- length(y)
mu <- 0 ## repeat with mu = mean(IndustryROE)
N <- 100000
sigma2 <- (n-1)*s2 / rchisq(N, n-1)
ybars <- rnorm(N, mu, sqrt(sigma2/n))
hist(ybars)
abline(v=ybar)
## one sample versus mu=0
y <- rnorm(20, mean = 0, sd = 2)
ybar <- mean(y)
s2 <- var(y)
n <- length(y)
mu <- 0
N <- 100000
sigma2 <- (n-1)*s2 / rchisq(N, n-1)
ybars <- rnorm(N, mu, sqrt(sigma2/n))
hist(ybars)
abline(v=ybar)
?var.test
