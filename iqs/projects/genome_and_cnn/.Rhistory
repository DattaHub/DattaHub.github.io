knitr::opts_chunk$set(echo = FALSE, cache = TRUE)
load("http://statweb.stanford.edu/~ckirby/brad/LSI/datasets-and-programs/data/prostatedata.RData")
load('http://statweb.stanford.edu/~ckirby/brad/LSI/datasets-and-programs/data/prostatedata.RData')
load('prostatedata.RData')
dim(prostatedata)
head(prostatedata)
col.names(prostatedata)
colnames(prostatedata)
which(colnames(prostatedata)=="1")
?t.test
prostate_pvals = numeric(6033) ## empty vectors
prostate_tvals = numeric(6033)
for(i in 1:6033){
t_test <-  t.test(prostatedata[i,1:50],prostatedata[i,1:52], paired = FALSE, var.equal = FALSE)
prostate_pvals[i] <-  t_test$p.value
prostate_tvals[i] <- t_test$statistic
}
hist(prostate_tvals)
hist(prostate_pvals)
par(mfrow = c(1,2))
hist(prostate_tvals)
hist(prostate_pvals)
hist(prostate_pvals)
sum(prostate_pvals<0.05)
hist(prostate_pvals)
prostate_pvals = numeric(6033) ## empty vectors
prostate_tvals = numeric(6033)
for(i in 1:6033){
t_test <-  t.test(prostatedata[i,1:50],prostatedata[i,51:102], paired = FALSE, var.equal = FALSE)
prostate_pvals[i] <-  t_test$p.value
prostate_tvals[i] <- t_test$statistic
}
hist(prostate_pvals)
sum(prostate_pvals<0.05)
sum(prostate_pvals<0.05/6033)
teststat = prostate_tvals
par(mfrow=c(1,2))
qqnorm(teststat, ylim = c(-5,5))
qqline(teststat)
hist(teststat, breaks = 30, col = "red", freq = F, xlim = c(-5,5), ylim = c(0,0.5))
curve(dnorm(x), lty = 2, lwd = 2, add=TRUE)
curve(dnorm(x, mean = mean(teststat), sd = sd(teststat)), lty = 3, lwd = 2, add=TRUE)
rawp = 2 * (1 - pnorm(abs(teststat)))
selected  <- p.adjust(rawp, method = "bonferroni") <0.05
esetSel <- eset [selected, ]
rawp = 2 * (1 - pnorm(abs(teststat)))
selected  <- p.adjust(rawp, method = "bonferroni") <0.05
sum(selected)
rawp = prostate_pvals
selected  <- p.adjust(rawp, method = "bonferroni") <0.05
sum(selected)
rawp = prostate_pvals
selected  <- p.adjust(rawp, method = "BH") <0.05
sum(selected)
set.seed(123)
n = 1000 ; p1 = 0.05
z1 = rnorm(n*p1, 2, 1); z2 = rnorm(n*(1-p1),0, 1)
z = c(z1,z2)
hist(z, freq = F, ylim = c(0,0.7)); curve(dnorm, add = T)
rawp = 2*(1 - pnorm(abs(z)))
reject.indices <- (rawp < 0.05)
sum(reject.indices)
true.indices = c(rep(1, n*p1), rep(0, n*(1-p1)))
(table(true.indices,reject.indices))
rawp = 2*(1 - pnorm(abs(z)))
reject.indices <- (rawp < 0.05)
sum(reject.indices)
true.indices = c(rep(1, n*p1), rep(0, n*(1-p1)))
(table(true.indices,1*reject.indices))
rawp = 2*(1 - pnorm(abs(z)))
reject.indices <- (rawp < 0.05)
sum(reject.indices)
true.indices = c(rep(1, n*p1), rep(0, n*(1-p1)))
(table(true.indices,reject.indices))
rawp = 2*(1 - pnorm(abs(z)))
reject.indices <- 1*(rawp < 0.05)
sum(reject.indices)
true.indices = c(rep(1, n*p1), rep(0, n*(1-p1)))
(table(true.indices,reject.indices))
cat("false discoveries", sum(true.indices==0)&(reject.indices==1))
rawp = 2*(1 - pnorm(abs(z)))
reject.indices <- 1*(rawp < 0.05)
sum(reject.indices)
true.indices = c(rep(1, n*p1), rep(0, n*(1-p1)))
(table(true.indices,reject.indices))
cat("false discoveries", sum((true.indices==0)&(reject.indices==1)))
install.packages("bnlearn")
tinytex::install_tinytex()
install.packages("xfun")
#######function to convert from contingency table to data (two vectors)
tabletodata <- function(x)
{
for (i in 1:nrow(x)) for (j in 1:ncol(x))
{
if (i == 1 & j == 1) results <- cbind(rep(i,x[i,j]),rep(j,x[i,j]))
if (i > 1 | j > 1) results <- rbind(results,cbind(rep(i,x[i,j]),rep(j,x[i,j])))
}
results
}
##
###### Permutation test for contingency table
##
permapproxX2 <- function(x,y,R)
{
results <- rep(NA,R)
for (i in 1:R) results[i] <- chisq.test(sample(x,length(x)),y)$statistic
results
}
###############################
#  permutation chi-sq test    #
###############################
##
##### example 1: Satisfaction v.s. Treatment
##
satisfy = c(1,1,2,2,2,3,3)
gender = c(1,1,1,1,2,2,2) #1: female; 2:male
(partytable <- table(gender, satisfy))  #convert from data to table
tabletodata(partytable)  #convert from table to data
f <- partytable
fi. <- matrix(apply(f,1,sum),ncol=1)
f.j <- matrix(apply(f,2,sum),nrow=1)
e <- (fi. %*% f.j)/sum(fi.)
(X2p <- sum((f-e)^2/e))
chisq.test(satisfy, gender)
sweep(f,1,fi.,"/")  # table of row percentages
prop.table(partytable,1)
sweep(f,2,f.j,"/")  # table of column percentages
prop.table(partytable,2)
permX2 <- permapproxX2(satisfy,gender,2000)
mean(permX2 >= X2p) ## X2p is the chi-square test statistics
## compare with
chisq.test(satisfy, gender)$p.value
chisq.test(satisfy, gender)$expected
##
###### example2: Gender versus Party
##
party <- c(rep(1,279),rep(2,73),rep(3,225),
rep(1,165),rep(2,47),rep(3,191))#1:Dem, 2: Ind, 3:Rep
gender <- c(rep(1,279+73+225),rep(2,165+47+191))  #1:female, 2:male
(partytable <- table(gender, party))
chisq.test(party, gender)
f <- partytable
fi. <- matrix(apply(f,1,sum),ncol=1)
f.j <- matrix(apply(f,2,sum),nrow=1)
e <- (fi. %*% f.j)/sum(fi.)
X2p <- sum((f-e)^2/e)
sweep(f,1,fi.,"/")  # table of row percentages
sweep(f,2,f.j,"/")  # table of column percentages
permX2 <- permapproxX2(party, gender,1000)
mean(permX2 >= chisq.test(party, gender)$statistic)
## compare with
chisq.test(party, gender)$p.value
##
###### example3: Presidential preference
##
president <- c(rep(1,10),rep(2,3))
region <- c(rep(1,6),rep(2,4),rep(1,1),rep(2,2))
(partytable <- table(president, region))
chisq.test(president, region)
f <- partytable
fi. <- matrix(apply(f,1,sum),ncol=1)
f.j <- matrix(apply(f,2,sum),nrow=1)
e <- (fi. %*% f.j)/sum(fi.)
X2p <- sum((f-e)^2/e)
sweep(f,1,fi.,"/")  # table of row percentages
sweep(f,2,f.j,"/")  # table of column percentages
permX2 <- permapproxX2(president, region,1000)
mean(permX2 >= chisq.test(president, region)$statistic)
## compare with
chisq.test(president, region)$p.value
perm.approx.r <- function(x,y,R)
{
## approximate permutation distribution of sample correlation coefficient r
n <- length(x)
results <- rep(NA,R)
for (i in 1:R) results[i] <- cor(x,y[sample(1:n,n)])
results
}
### Read data
library(MASS)
attach(cars)
cars
x<- cars$speed
y<-cars$dist
### direct function for calculating the sample correlation: r
(r = cor(x,y))
#### calculate r and beta1hat manually:
(sumx = sum(x))
(sumy = sum(y))
(sumxy = sum(x*y))
(sumxx = sum(x^2))
(sumyy = sum(y^2))
(n = length(x))
xbar = sumx/n
ybar = sumy/n
Sxy = 1/(n-1)*(sumxy - n*xbar*ybar)
Sx2 = 1/(n-1)*(sumxx - n*xbar^2)
Sy2 = 1/(n-1)*(sumyy - n*ybar^2)
Sx = sqrt(Sx2)
Sy = sqrt(Sy2)
(robs = Sxy/(Sx*Sy))
cor.test(x,y)
##
##### t-test assuming normality
##
tt = sqrt((n-2)/(1-robs^2))*robs
1-pt(tt,n-2)
##
##### large sample approximation
##
(Zr = sqrt(n-1)*r)
1-pnorm(Zr)
R = 1e5
permr <- perm.approx.r(x,y,R)
mean(permr >= robs)
mean(abs(permr) >= abs(robs))
cor.test(x,y)
#####################################
#  Spearman Correlation (ties)      #
#####################################
##
##### Reading ability data set
##
x=1:10  #rankings of 10 children on a reading test
y = c(3,2,1,4,5,6,8,7,10,9) #teacher's ranking on the reading abilty
(x = rank(x))  ###no need for this data as they are already ranked
(y = rank(y))
## Spearman correlation
(rs.obs = cor(x, y))
## permutation test for the Spearman correlation
permr <- perm.approx.r(x, y, 100)
mean(permr >= rs.obs)
mean(abs(permr) >= abs(rs.obs))
cor.test(x,y, method = "spearman")
x = c(8,8,7,8,5,6,6,9,8,7) #Judge A
y = c(7,8,8,5,6,4,5,8,6,9) #Judge B
x
y
(x = rank(x))
(y = rank(y))
## Spearman correlation
(rs.obs = cor(x, y))
## permutation test for the Spearman correlation
R = 1e4
permr <- perm.approx.r(x, y, R)
mean(permr >= rs.obs)
mean(abs(permr) >= abs(rs.obs))
cor.test(x,y, method = "spearman")
sample(1:10)
?sample
sample(1:10)
sample(1:10)
perm.approx.r <- function(x,y,R)
{
## approximate permutation distribution of sample correlation coefficient r
n <- length(x)
results <- rep(NA,R)
for (i in 1:R) results[i] <- cor(x,y[sample(1:n,n)])
results
}
perm.approx.r <- function(x,y,R)
{
## approximate permutation distribution of sample correlation coefficient r
n <- length(x)
results <- rep(NA,R)
for (i in 1:R) results[i] <- cor(x,y[sample(1:n,n)])
results
}
### Read data
library(MASS)
attach(cars)
cars
x<- cars$speed
y<-cars$dist
### direct function for calculating the sample correlation: r
(r = cor(x,y))
#### calculate r and beta1hat manually:
(sumx = sum(x))
(sumy = sum(y))
(sumxy = sum(x*y))
(sumxx = sum(x^2))
(sumyy = sum(y^2))
(n = length(x))
xbar = sumx/n
ybar = sumy/n
Sxy = 1/(n-1)*(sumxy - n*xbar*ybar)
Sx2 = 1/(n-1)*(sumxx - n*xbar^2)
Sy2 = 1/(n-1)*(sumyy - n*ybar^2)
Sx = sqrt(Sx2)
Sy = sqrt(Sy2)
(robs = Sxy/(Sx*Sy))
cor.test(x,y)
##
##### t-test assuming normality
##
tt = sqrt((n-2)/(1-robs^2))*robs
tt
?pt
1-pt(tt,n-2)
##
##### large sample approximation
##
(Zr = sqrt(n-1)*r)
1-pnorm(Zr)
R = 1000
permr <- perm.approx.r(x,y,R)
length(permr)
permr
hist(permr)
hist(permr)
mean(permr >= robs)
R = 1e5
permr <- perm.approx.r(x,y,R)
mean(permr >= robs)
mean(abs(permr) >= abs(robs))
#####################################
#  Spearman Correlation (ties)      #
#####################################
##
##### Reading ability data set
##
x=1:10  #rankings of 10 children on a reading test
y = c(3,2,1,4,5,6,8,7,10,9) #teacher's ranking on the reading abilty
(x = rank(x))  ###no need for this data as they are already ranked
(y = rank(y))
## Spearman correlation
(rs.obs = cor(x, y))
## Spearman correlation
(rs.obs = cor(x, y))
## permutation test for the Spearman correlation
permr <- perm.approx.r(x, y, 1e5)
mean(permr >= rs.obs)
mean(abs(permr) >= abs(rs.obs))
#######function to convert from contingency table to data (two vectors)
tabletodata <- function(x)
{
for (i in 1:nrow(x)) for (j in 1:ncol(x))
{
if (i == 1 & j == 1) results <- cbind(rep(i,x[i,j]),rep(j,x[i,j]))
if (i > 1 | j > 1) results <- rbind(results,cbind(rep(i,x[i,j]),rep(j,x[i,j])))
}
results
}
##
###### Permutation test for contingency table
##
permapproxX2 <- function(x,y,R)
{
results <- rep(NA,R)
for (i in 1:R) results[i] <- chisq.test(sample(x,length(x)),y)$statistic
results
}
###############################
#  permutation chi-sq test    #
###############################
##
##### example 1: Satisfaction v.s. Treatment
##
satisfy = c(1,1,2,2,2,3,3)
gender = c(1,1,1,1,2,2,2) #1: female; 2:male
(partytable <- table(gender, satisfy))  #convert from data to table
f <- partytable
fi. <- matrix(apply(f,1,sum),ncol=1)
f.j <- matrix(apply(f,2,sum),nrow=1)
e <- (fi. %*% f.j)/sum(fi.)
(X2p <- sum((f-e)^2/e))
chisq.test(satisfy, gender)
permX2 <- permapproxX2(satisfy,gender,2000)
mean(permX2 >= X2p) ## X2p is the chi-square test statistics
## compare with
chisq.test(satisfy, gender)$p.value
chisq.test(satisfy, gender)$expected
##
###### example2: Gender versus Party
##
party <- c(rep(1,279),rep(2,73),rep(3,225),
rep(1,165),rep(2,47),rep(3,191))#1:Dem, 2: Ind, 3:Rep
gender <- c(rep(1,279+73+225),rep(2,165+47+191))  #1:female, 2:male
(partytable <- table(gender, party))
chisq.test(party, gender)
permX2 <- permapproxX2(party, gender,1000)
mean(permX2 >= chisq.test(party, gender)$statistic)
