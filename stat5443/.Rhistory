knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=TRUE)
data("voting", package = "HSAUR")
install.packages("HSAUR")
install.packages("datasets.load")
install.packages("HSAUR2")
data("voting", package = "HSAUR")
require("MASS")
head(voting)
data("voting", package = "HSAUR")
require("MASS")
?voting
data("voting", package = "HSAUR")
require("MASS")
dim(voting)
data("voting", package = "HSAUR")
require("MASS")
dim(voting)
names(voting)
data("voting", package = "HSAUR")
require("MASS")
dim(voting)
colnames(voting)
?voting
HSAUR::voting
?HSAUR
?sort
?rnorm
x <-  10
test <- function(z){
z <- z + 10
cat(z)
}
test()
test <- function(z = 5){
z <- z + 10
cat(z)
}
test()
test(x)
x
x <-  10
test <- function(x = 5){
x <- x + 10
cat("the value of x is ", x, "\n")
}
test(x)
x
x <-  10
test <- function(x){
x <- x + 10
cat("the value of x is ", x, "\n")
}
test(x)
test <- function(x){
x <- x + 10
cat("the value of x is ", x, "\n")
}
test(x)
x = 1000
test(x)
test <- function(x = 10){
x <- x + 10
cat("the value of x is ", x, "\n")
}
x = 1000
test(x)
test()
knitr::opts_chunk$set(echo = FALSE, cache = TRUE)
ptm <- proc.time()
for(i in 1:10){
Sys.sleep(1)
}
proc.time() - ptm
n = as.numeric(Sys.getenv("NUMBER_OF_PROCESSORS")) # on Windows
require(doParallel)
cl <- makeCluster(n)
registerDoParallel(cl)
ptm <- proc.time()
foreach(i=1:4) %dopar% {Sys.sleep(1)}
proc.time()-ptm
ptm <- proc.time()
for(i in 1:4){
res <- Sys.sleep(1)
}
proc.time() - ptm
n = as.numeric(Sys.getenv("NUMBER_OF_PROCESSORS")) # on Windows
require(doParallel)
cl <- makeCluster(n)
registerDoParallel(cl)
ptm <- proc.time()
foreach(i=1:4) %dopar% {res <- Sys.sleep(1)}
proc.time()-ptm
n = as.numeric(Sys.getenv("NUMBER_OF_PROCESSORS")) # on Windows
require(doParallel)
cl <- makeCluster(n)
registerDoParallel(cl)
ptm <- proc.time()
foreach(i=1:4) %dopar% {Sys.sleep(1)}
proc.time()-ptm
n = as.numeric(Sys.getenv("NUMBER_OF_PROCESSORS")) # on Windows
require(doParallel)
cl <- makeCluster(n)
registerDoParallel(cl)
ptm <- proc.time()
res <- foreach(i=1:4) %dopar% {Sys.sleep(1)}
proc.time()-ptm
?Sys.sleep
"Hello World!"
rev("Hello World!")
str_rev("Hello World!")
f = function(x,y,z) {
paste0("x=",x," y=",y," z=",z)
}
f(1,2,3)
f(z=1,x=2,y=3)
f(y=2,1,3)
f(y=2,1,x=3)
## The problem with tied observations
wilcox.test(c(-2, -2, 2, 2, 5, 5, 5), mu = 3)
##We can suppress this warning message, but it's not recommended in practice
?suppressWarnings
suppressWarnings(wilcox.test(c(-2,-2,2,2,5,5,5),mu = 3))
### R example
x2 <- c(5.6, 6.1, 6.3, 6.4, 6.5, 6.6, 7.0, 7.5, 7.9, 8.0,8.0, 8.1, 8.1, 8.2, 8.4, 8.5, 8.7, 9.4, 14.3, 26.0)
## Plot the density
plot(density(x2))
suppressWarnings(wilcox.test(x2, mu=9, conf.int=TRUE))
binom.test(sum(x2>9),length(x2),alternative = "two.sided")
t.test(x2,alternative = "two.sided",mu=9)
